{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Worksheet 3A: Dictionaries\n",
    "This worksheet corresponds to *Lesson 3A: Dictionaries* in the online course. Refer to that lesson as necessary to complete these practice exercises."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 1a\n",
    "Starting with the dictionary below, add another record with the same key as an existing record, such as \"X10001\": \"Mary\". Before running the updated code, predict what you think will happen, keeping in mind that a dictionary cannot include the same key in more than one record.\n",
    "\n",
    "Was your prediction correct?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dan\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Mandeep'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l =[\"mike\", \"dan\"]\n",
    "print(l[-1])\n",
    "l.append(\"Mandeep\")\n",
    "l[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Michael\n"
     ]
    }
   ],
   "source": [
    "students_dict = dict()\n",
    "students_dict['X10000'] = 'Michael' #Assign the key X10000,the value Michael\n",
    "students_dict['X10002'] = 'Neil' #Assign the key X10002,the value Neil\n",
    "students_dict['X10001'] = 'Karen' #Assign the key X10001,the value Karen\n",
    "students_dict['X10001'] = 'Daniel'\n",
    "\n",
    "print(students_dict['X10000'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 1b\n",
    "Create a dictionary that contains key-value pairs of your choice. The dictionary should have at least four key-value pairs. Make sure to use meaningful keys and values, so you would eventually be able to look up a value using its key.\n",
    "\n",
    "Suggestions include:\n",
    "* Names and phone numbers\n",
    "* Menu prices\n",
    "* RPG players and roles\n",
    "* Text acronyms and their meanings\n",
    "\n",
    "Remember that each key must be unique in the dictionary. However, key-value pairs can be added in any order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: [8], 'latte': 3.99, 'mocha': 4.99, 'mint': 3.75}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# your code here\n",
    "menu={\n",
    "    \"black\": 2.99,\n",
    "    \"latte\": 3.99,\n",
    "    \"mocha\": 4.99,\n",
    "    \"mint\": 3.75\n",
    "}\n",
    "menu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 2\n",
    "Use the two lists below to create a dictionary where the state abbreviations are used as keys and the values are the respective populations. \n",
    "\n",
    "The state and population lists are in the same order, e.g.,  CA has a population of 39557045.\n",
    "\n",
    "After creating the dictionary, retrieve the population of each state individually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4468402"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states = ['CA', 'NY', 'KY']\n",
    "population  = [39557045,19542209,4468402]\n",
    "\n",
    "#states_data = {\n",
    "#    states[0]:population[0]\n",
    "#}\n",
    "\n",
    "mapping = zip(states, population)\n",
    "\n",
    "states_data= dict(mapping)\n",
    "\n",
    "states_data['KY']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 3\n",
    "Write a script that creates a dictionary and then uses a `for` loop to display the individual values in the dictionary.\n",
    "\n",
    "You can use the practice dictionary you created earlier in this lesson, if you wish."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.99\n",
      "3.99\n",
      "4.99\n",
      "3.75\n",
      "black\n",
      "latte\n",
      "mocha\n",
      "mint\n",
      "black->2.99\n",
      "latte->3.99\n",
      "mocha->4.99\n",
      "mint->3.75\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dict_items([('black', 2.99), ('latte', 3.99), ('mocha', 4.99), ('mint', 3.75)])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "menu={\n",
    "    \"black\": 2.99,\n",
    "    \"latte\": 3.99,\n",
    "    \"mocha\": 4.99,\n",
    "    \"mint\": 3.75\n",
    "}\n",
    "\n",
    "# loop over values\n",
    "for i in menu.values():\n",
    "    print(i)\n",
    "    \n",
    "# loop over keys\n",
    "for i in menu.keys():\n",
    "    print(i)\n",
    "\n",
    "# loop over both\n",
    "for key, value in menu.items():\n",
    "    print(key + \"->\" + str(value) )\n",
    "\n",
    "menu.items()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 4\n",
    "Create a program that asks the user for a series of key-value pairs and assigns each pair to the same dictionary. Display the contents of the dictionary in  the last step, in the format \"key: value,\" with each key-value pair on a separate line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a key, or q to quit SCM\n",
      "Please enter a value git\n",
      "Please enter a key, or q to quit IAC\n",
      "Please enter a value Terraform\n",
      "Please enter a key, or q to quit CM\n",
      "Please enter a value Ansible\n",
      "Please enter a key, or q to quit CO\n",
      "Please enter a value K8s\n",
      "Please enter a key, or q to quit MO\n",
      "Please enter a value Prometheus\n",
      "Please enter a key, or q to quit MO\n",
      "Please enter a value Grafana\n",
      "Please enter a key, or q to quit q\n"
     ]
    }
   ],
   "source": [
    "\n",
    "my_dict={} # empty dict\n",
    "\n",
    "while True:\n",
    "    key = input(\"Please enter a key, or q to quit\")\n",
    "    if key == \"q\":\n",
    "        break\n",
    "    value = input(\"Please enter a value\")\n",
    "    \n",
    "    my_dict[key] = value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'SCM': 'git',\n",
       " 'IAC': 'Terraform',\n",
       " 'CM': 'Ansible',\n",
       " 'CO': 'K8s',\n",
       " 'MO': 'Grafana'}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 5\n",
    "The code below includes two lists: one for each state's abbreviation and the other for the full name of each state. Each list presents the states in the same order.\n",
    "\n",
    "Transform the lists into a single dictionary of key-value pairs, where:\n",
    "* The key is the state abbreviation\n",
    "* The value is the full state name\n",
    "\n",
    "Print the list of states from the dictionary, displaying both the abbreviation and the name of the state in the output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas', 'CA': 'California', 'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia', 'HI': 'Hawaii', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa', 'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland', 'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi', 'MO': 'Missouri', 'MT': 'Montana', 'NE': 'Nebraska', 'NV': 'Nevada', 'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico', 'NY': 'New York', 'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio', 'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina', 'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VT': 'Vermont', 'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia', 'WI': 'Wisconsin', 'WY': 'Wyoming'}\n"
     ]
    }
   ],
   "source": [
    "states_abbrev = [\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"FL\", \"GA\", \n",
    "          \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \n",
    "          \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \n",
    "          \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \n",
    "          \"...
Collapse





Tomi Janet Ogunsuyi AEM (EMEA)
  9:03 AM
Good morning @channel
Happy Friday! :partying_face:
I hope you are well.
Your second online survey is due TODAY at 5:30pm GMT time. You will be receiving these every other week as you progress through training. The surveys give us great feedback on how we can improve your current cohort and future classes.
Weblink: https://wiley.qualtrics.com/jfe/form/SV_1KZ6SzIOZRxgkvQ
If you have any questions, please feel free to reach out to me via Slack.
Thank you in advance and take care! (edited) 
wiley.qualtrics.comwiley.qualtrics.com
Wiley Edge Cohort Survey
Survey sent to Alumni while active in the Academy